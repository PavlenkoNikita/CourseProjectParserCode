VAR BLOCK| codeProgramString = Regex.Replace(codeProgramString, @"\s+", " ");
VAR BLOCK| int countBrackets = 0;
VAR BLOCK| bool singleQuotes = false;
VAR BLOCK| bool doubleQuotes = false;
VAR BLOCK| string sentence = "";
VAR BLOCK| char symb;
VAR BLOCK| int ind = 0;
START DO| 
VAR BLOCK| symb = codeProgramString[ind];
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
START IF| singleQuotes == true && symb == ''
START IF| codeProgramString[0] == '''
VAR BLOCK| sentence += symb;
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
VAR BLOCK| sentence += ''';
END IF| 
START IF| codeProgramString[0] == '"'
VAR BLOCK| sentence += symb;
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
VAR BLOCK| sentence += '"';
END IF| 
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
CONTINUE DWHILE| 
END IF| 
START IF| doubleQuotes == true && symb == '' && codeProgramString[0] == '"'
VAR BLOCK| sentence += symb;
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
VAR BLOCK| sentence += '"';
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
CONTINUE DWHILE| 
END IF| 
START IF| stringSwitch.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| stringCase.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| stringStartGoto.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| stringEndGoto.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| stringDefault.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| stringElse.IsMatch(sentence)== true && doubleQuotes == false && singleQuotes == false &&(symb == ' ' || symb == '{')
FUNC BLOCK| addString(ref sentence);
END IF| 
START IF| symb == ''' && doubleQuotes == false
START IF| singleQuotes == false
VAR BLOCK| singleQuotes = true;
END IF| 
START IF| singleQuotes == true
VAR BLOCK| singleQuotes = false;
END IF| 
VAR BLOCK| sentence += symb;
CONTINUE DWHILE| 
END IF| 
START IF| symb == '"' && singleQuotes == false
START IF| doubleQuotes == false
VAR BLOCK| doubleQuotes = true;
END IF| 
START IF| doubleQuotes == true
VAR BLOCK| doubleQuotes = false;
END IF| 
VAR BLOCK| sentence += symb;
CONTINUE DWHILE| 
END IF| 
START IF| symb == ' '
START IF| sentence == ""
CONTINUE DWHILE| 
END IF| 
VAR BLOCK| sentence += symb;
CONTINUE DWHILE| 
END IF| 
START IF| symb == ';' && doubleQuotes == false && singleQuotes == false
START IF| sentence[sentence.Length - 1] == ' '
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
END IF| 
START IF| countBrackets == 0
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
END IF| 
START ELSE| 
VAR BLOCK| sentence += symb;
END ELSE| 
START IF| codeProgramString.Length != 0
START WHILE| codeProgramString[0] == ' '
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
START IF| codeProgramString.Length == 0
END WHILE| break;
END IF| 
END WHILE| 
END IF| 
END IF| 
START IF| symb == '('
START IF| sentence != "" && doubleQuotes == false && singleQuotes == false
START IF| sentence[sentence.Length - 1] == ' '
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
END IF| 
VAR BLOCK| countBrackets++;
END IF| 
VAR BLOCK| sentence += symb;
START IF| codeProgramString.Length != 0
START WHILE| codeProgramString[0] == ' '
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
START IF| codeProgramString.Length == 0
END WHILE| break;
END IF| 
END WHILE| 
END IF| 
END IF| 
START IF| symb == '{' && singleQuotes == false && doubleQuotes == false
START IF| sentence != ""
START IF| sentence[sentence.Length - 1] == ' '
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
END IF| 
END IF| 
START IF| stringNamespace.IsMatch(sentence)== true
FUNC BLOCK| addString(ref sentence);
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START IF| stringClass.IsMatch(sentence)== true
FUNC BLOCK| addString(ref sentence);
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START IF| stringStruct.IsMatch(sentence)== true
FUNC BLOCK| addString(ref sentence);
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START IF| stringDo.IsMatch(sentence)== true
FUNC BLOCK| addString(ref sentence);
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START IF| stringMethod.IsMatch(sentence)== true
FUNC BLOCK| addString(ref sentence);
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
END IF| 
START IF| codeProgramString.Length != 0
START WHILE| codeProgramString[0] == ' '
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
START IF| codeProgramString.Length == 0
END WHILE| break;
END IF| 
END WHILE| 
END IF| 
START IF| sentence == "" && stringEndSentence.IsMatch(codeProgramString[ind].ToString())== true
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
VAR BLOCK| countBrackets++;
VAR BLOCK| sentence += symb;
END IF| 
START IF| symb == ')' && singleQuotes == false && doubleQuotes == false
START IF| sentence != ""
START IF| sentence[sentence.Length - 1] == ' '
VAR BLOCK| sentence = sentence.Remove(sentence.Length - 1, 1);
END IF| 
END IF| 
VAR BLOCK| countBrackets--;
START IF| codeProgramString.Length != 0
START WHILE| codeProgramString[0] == ' '
VAR BLOCK| codeProgramString = codeProgramString.Remove(0, 1);
START IF| codeProgramString.Length == 0
END WHILE| break;
END IF| 
END WHILE| 
END IF| 
START IF| countBrackets == 0 && stringEndSentence.IsMatch(codeProgramString[ind].ToString())== true
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START ELSE| 
VAR BLOCK| sentence += symb;
END ELSE| 
END IF| 
START IF| symb == '}' && singleQuotes == false && doubleQuotes == false
START IF| countBrackets == 0 && sentence == ""
FUNC BLOCK| addSymbAndWriteString(ref sentence, ref symb);
CONTINUE DWHILE| 
END IF| 
START IF| doubleQuotes == false
VAR BLOCK| countBrackets--;
END IF| 
VAR BLOCK| sentence += symb;
END IF| 
START ELSE| 
VAR BLOCK| sentence += symb;
END ELSE| 
END DWHILE| codeProgramString != ""
